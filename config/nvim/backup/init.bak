"Dein (package manager) Scripts---------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/home/hassan4350/.local/share/dein/./repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/home/hassan4350/.local/share/dein/.')
  call dein#begin('/home/hassan4350/.local/share/dein/.')

  " Let dein manage dein
  " Required:
  call dein#add('/home/hassan4350/.local/share/dein/./repos/github.com/Shougo/dein.vim')

  " Color scheme for vim
  call dein#add('iCyMind/NeoSolarized')
  " preview markdown in a chrome window using `:InstantMarkdownPreview`
  call dein#add('suan/vim-instant-markdown')
  " adds support for pandoc flavored markdown
  call dein#add('vim-pandoc/vim-pandoc')
  " adds support for pandoc flavored markdown
  call dein#add('vim-pandoc/vim-pandoc-syntax')
  " adds coloring for haskell code
  call dein#add('neovimhaskell/haskell-vim')
  " `:Codi haskell` will run haskell code inside a text window
  call dein#add('metakirby5/codi.vim')
  " shows line numbers relative in command mode and absolute in insert mode
  call dein#add('myusuf3/numbers.vim')
  " shows fancy bottom bar in vim 
  call dein#add('vim-airline/vim-airline')
  " adds solarized theme
  call dein#add('vim-airline/vim-airline-themes')
  " shows changes in the gutter to a git file
  call dein#add('mhinz/vim-signify')
  " use multiple cursors by ctrl-n
  call dein#add('terryma/vim-multiple-cursors')
  " align text
  call dein#add('godlygeek/tabular')
  " surround words
  call dein#add('tpope/vim-surround')
  " repeat plugin command using `.`
  call dein#add('tpope/vim-repeat')
  " adds additional text objects to vim 
  call dein#add('wellle/targets.vim')
  " icons in vim
  call dein#add('ryanoasis/vim-devicons')
  " real time linting/error checking
  call dein#add('w0rp/ale')
  "add search using subvert from abolish tim pope

  " not working:
  "call dein#add('Shougo/denite.nvim')
  "call dein#add('sjl/gundo.vim')
  "call dein#add('vim-ctrlspace/vim-ctrlspace')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable
" allow buffer switches while not saved
set hidden

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

" Colors
colorscheme NeoSolarized
" set dark background
set background=dark
" show line numbers
set number
" expand the tonal range displayed.
let g:neosolarized_contrast = "high"
" Special characters such as trailing whitespace, tabs, newlines, are shown with
" low visibility
let g:neosolarized_visibility = "low"
" highlight when lines are too long with brighter background
highlight ColorColumn ctermfg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" two space tabs
set ts=2 sts=2 sw=2 expandtab

" recursively search for files
" fuzzy file find using globbing,
" *hs searches for all haskell files
set path+=**

" formatting
"w - specify line length (80)
"r - repeat characters in bodiless lines
"e - remove ‘superflous’ lines
"q - handle nested quotations in plaintext email
" use formatting by gq command
set formatprg=par\ -w80req

" hide `-- Insert --` on last line while using lightline
set noshowmode

" open file to the last edited location
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
                     \ exe "normal! g`\"" | endif

" automatically read the file when it is changed by other than vim
autocmd FileChangedShell *
      \ echohl WarningMsg |
      \ echo "File has been changed outside of vim." |
      \ echohl None

" change buffers with F7 and F8
nnoremap <F7> :bnext<CR>
nnoremap <F8> :bprevious<CR>

" show 5 lines between the cursor and the top/bottom of screen
set scrolloff=5

" remove search highlights on redraw
noremap <silent> <C-L> <C-L>:nohls<CR>

" search based on whether the search is capitalized
set smartcase

" Markdown suan/vim-instant-markdown
" refresh not so rapidly
let g:instant_markdown_slow = 1
" do not open instant markdown when opening a markdown file
let g:instant_markdown_autostart = 0

" Pandoc-Markdown
" hide urls
let g:pandoc#syntax#conceal#urls=1
" change weird dog paw bullet to normal bullet
let g:pandoc#syntax#conceal#cchar_overrides = {"li" : "◦"}" ∙
" hide everything other than the #'s
let g:pandoc#folding#level = 0
" do not show the depth of sub/header in gutter
let g:pandoc#folding#fdc = 0
" run a command on :w 
"let g:pandoc#command#autoexec_on_writes = 1
" run this command 
"let g:pandoc#command#autoexec_commands = ''

" Start Markdown fold functions
function! MarkdownFolds()
  let thisline = getline(v:lnum)
  if match(thisline, '^##') >= 0
    let syntaxGroup = map(synstack(a:lnum, 1), 'synIDattr(v:val, "name")')
    if syntaxGroup == "markdownCode" 
      return ">2"
  elseif match(thisline, '^#') >= 0
    let syntaxGroup = map(synstack(a:lnum, 1), 'synIDattr(v:val, "name")')
    if syntaxGroup == "markdownCode" 
      return ">1"
  else 
    return "="
  endif
endfunction

function! MarkdownFoldText()
  let foldsize = (v:foldend-v:foldstart)
  return getline(v:foldstart).'                    '.' ('.foldsize.' lines)'
endfunction

set foldmethod=expr
set foldexpr=MarkdownFolds()
set foldtext=MarkdownFoldText()
" End Markdown
